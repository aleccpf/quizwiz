@model QuizWiz.Models.ExamSectionModel

@{
  ViewBag.Title = "Take";
}

<h2>Taking @Model.Exam.Name</h2>

@if (Model.Submission != null)
{
  <input type="hidden" id="SubmissionId" name="SubmissionId" value="@Model.Submission.SubmissionId" data-bind="value: submissionId" />
  <input type="hidden" id="QuestionsCount" name="QuestionsCount" value="@Model.Exam.Questions.Count" data-bind="value: questionsCount" />
}
else
{
  <input type="hidden" id="SubmissionId" name="SubmissionId" value="0" data-bind="value: submissionId"/>
}

<div>
  <span data-bind="text: clock"></span>
</div>

<div data-bind="template: { name: 'question-template', data: question }">
</div>

<div>
  <button class="btn btn-primary" data-bind="text: action, click: submitQuestion">Submit</button>
</div>

<script type="text/html" id="question-template">
  <h3 data-bind="html: Text"></h3>
  <!-- ko ifnot: IsOpenEnded -->
  <div data-bind="template: { name: 'answer-template', foreach: Answers, as: 'answer' }"></div>
  <!-- /ko -->
  <!-- ko if: IsOpenEnded -->
  <p>
    <textarea data-bind="value: $root.responseText" class="form-control" rows="10"></textarea>
  </p>
  <!-- /ko -->
</script>

<script type="text/html" id="answer-template">
  <p>
    <input data-bind="value: AnswerId, checked: $root.responseId" name="answerGroup" type="radio" value="" class="form-control"/><span data-bind="html: Text"></span>
  </p>
</script>

@section Scripts {
  <script>
    $.enableExam = {};
    $.enableExam.question = JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Question)))');
  </script>
  <script type="text/javascript">
    function ExamViewModel() {
      var self = this;
      this.responseId = ko.observable();
      this.responseText = ko.observable();
      this.action = ko.observable('Next');
      this.question = ko.observable($.enableExam.question);
      this.submissionId = ko.observable($('#SubmissionId').val());
      this.questionsCount = ko.observable(parseInt($('#QuestionsCount').val(), 10));
      this.submitQuestion = function () {
        $.ajax({
          url: '/exams/submitresponse',
          type: 'POST',
          dataType: 'json',
          data: { SubmissionId: self.submissionId, QuestionId: self.question().QuestionId, AnswerId: self.responseId, Value: self.responseText() },
          success: function (data) {
            if (data.HasNext) {
              location.hash = data.OrderIndex;
            }
            else {
              location = '/exams/finished';
            }
          },
          error: function (jqXhr, status, msg) {
            if (jqXhr.status == 300) {
              location = '/exams/finished';
            }
            else {
              alert("Unexpected error. Contact support.");
            }
          }
        });
      };

      this.getQuestion = function (orderIndex, submissionId) {
        $.ajax({
          url: '/exams/getquestion',
          type: 'GET',
          data: { OrderIndex: orderIndex, SubmissionId: submissionId },
          dataType: 'json',
          success: function (data) {
            if (data.Question) {
              self.question(data.Question);
              self.responseText(data.Question.Value);

              if (self.question().OrderIndex == self.questionsCount()) {
                self.action("Finish");
              }
            }
            else {
              location = '/exams/finished';
            }
          },
          error: function (jqXhr) {
            if (jqXhr.status == 300) {
              location = '/exams/finished';
            }
            else {
              alert("Unexpected error. Contact support.");
            }
          }
        });
      };

      this.clock = ko.observable(new Date());

      this.tick = function () {
        self.clock(new Date());
      };

      this.heartbeat = function () {
        $.ajax({
          url: '/exams/heartbeat',
          type: 'GET',
          data: { SubmissionId: self.submissionId },
          success: function () {
          },
          error: function () {
          }
        });
      };

      setInterval(self.tick, 1000);

      setInterval(self.heartbeat, 5000);

      Sammy(function () {
        this.get('#:orderIndex', function () {
          self.getQuestion(this.params.orderIndex, self.submissionId);
        });
      }).run();
    };

    var viewModel = new ExamViewModel();
    ko.applyBindings(viewModel);
  </script>
}